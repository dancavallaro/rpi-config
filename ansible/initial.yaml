- name: Bootstrap RPi
  hosts: all
  tasks:
    - name: Sanity check
      ansible.builtin.ping:
    - name: Install apt packages
      become: true
      ansible.builtin.apt:
        update_cache: yes
        pkg:
          - vim
          - curl
          - ca-certificates
          - lm-sensors
          - jq
          - sqlite3
    - name: Clone rpi-config repo
      ansible.builtin.git:
        repo: git@github.com:dancavallaro/rpi-config.git
        dest: ~/rpi-config
        accept_newhostkey: true
        version: main
    - name: Install .vimrc
      ansible.builtin.file:
        src: ~/rpi-config/dotfiles/vimrc
        dest: ~/.vimrc
        state: link
        force: true
    - name: Install .gitconfig
      ansible.builtin.file:
        src: ~/rpi-config/dotfiles/gitconfig
        dest: ~/.gitconfig
        state: link
        force: true
    - name: Create virtual env
      become: true
      ansible.builtin.command: python3 -m venv /usr/local/rpi-config/.venv
    - name: Install dependencies for Python scripts
      become: true
      ansible.builtin.pip:
        requirements: "{{ ansible_user_dir }}/rpi-config/requirements.txt"
        executable: /usr/local/rpi-config/.venv/bin/pip
    - name: Copy scripts
      become: true
      ansible.builtin.copy:
        remote_src: true
        src: "{{ ansible_user_dir }}/rpi-config/bin"
        dest: /usr/local/rpi-config
        mode: '755'
    - name: Install AWS CLI
      become: true
      ansible.builtin.command: "{{ ansible_user_dir }}/rpi-config/ansible/install-aws-cli"
    - name: Install Docker
      become: true
      ansible.builtin.command: "{{ ansible_user_dir }}/rpi-config/ansible/install-docker"
    - name: Add my user to docker group
      become: true
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        groups: docker
        append: true
    - name: Create pi user
      become: true
      ansible.builtin.user:
        name: pi
        groups: gpio,docker,dialout
        append: true
    - name: Create user pi's .aws directory
      become: true
      ansible.builtin.file:
        path: /home/pi/.aws
        state: directory
        owner: pi
        group: pi
    - name: Create user pi's AWS credentials file
      become: true
      ansible.builtin.file:
        path: /home/pi/.aws/credentials
        state: touch
        owner: pi
        group: pi
        mode: '600'
    - name: Install crontab
      become: true
      ansible.builtin.copy:
        remote_src: true
        src: /home/dan/rpi-config/etc/crontab
        dest: /etc/cron.d/rpi
        owner: root
        group: root
    - name: Print completion message
      ansible.builtin.debug:
        msg: Done with initial provisioning! Run SSM activation next.