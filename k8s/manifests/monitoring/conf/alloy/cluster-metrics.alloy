prometheus.relabel "output" {
  rule {
    replacement = "cluster_metrics"
    target_label = "service"
  }
  forward_to = [
    prometheus.remote_write.mimir.receiver,
  ]
}

// ----------------------------------------------------------------------------
// kube_state_metrics
// ----------------------------------------------------------------------------

prometheus.scrape "kube_state_metrics" {
  targets = [{"__address__" = "kube-state-metrics.monitoring:80"}]
  job_name = "integrations/kubernetes/kube-state-metrics"
  scrape_interval = "60s"
  forward_to = [prometheus.relabel.kube_state_metrics.receiver]
}

prometheus.relabel "kube_state_metrics" {
  rule {
    source_labels = ["__name__"]
    regex = ".*_created|.*_info|kube_pod_.*|kube_deployment_status_replicas.*"
    action = "keep"
  }
  forward_to = [
    prometheus.relabel.output.receiver,
  ]
}

// ----------------------------------------------------------------------------
// kubelet cAdvisor metrics
// ----------------------------------------------------------------------------

discovery.kubernetes "nodes" {
  role = "node"
}

discovery.relabel "cadvisor" {
  targets = discovery.kubernetes.nodes.targets
  rule {
    replacement = "/metrics/cadvisor"
    target_label = "__metrics_path__"
  }
  rule {
    source_labels = ["__meta_kubernetes_node_name"]
    target_label  = "node"
  }
}

prometheus.scrape "cadvisor" {
  targets = discovery.relabel.cadvisor.output
  job_name = "integrations/kubernetes/cadvisor"
  scrape_interval = "60s"
  scheme = "https"
  tls_config {
    insecure_skip_verify = true
  }
  bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
  forward_to = [prometheus.relabel.cadvisor.receiver]
}

prometheus.relabel "cadvisor" {
  rule {
    source_labels = ["__name__"]
    regex = "container_cpu_usage_seconds_total|container_memory_working_set_bytes|container_cpu_cfs_throttled_seconds_total|container_oom_events_total|container_network_.*|machine_.*"
    action = "keep"
  }
  // Drop empty container labels, addressing https://github.com/google/cadvisor/issues/2688
  rule {
    source_labels = ["__name__", "container"]
    separator = "@"
    regex = "(container_cpu_.*|container_fs_.*|container_memory_.*)@"
    action = "drop"
  }
  // Drop empty image labels, addressing https://github.com/google/cadvisor/issues/2688
  rule {
    source_labels = ["__name__", "image"]
    separator = "@"
    regex = "(container_cpu_.*|container_fs_.*|container_memory_.*|container_network_.*)@"
    action = "drop"
  }
  // Filter out non-physical interfaces
  rule {
    source_labels = ["__name__", "interface"]
    separator = "@"
    regex = "container_network_.*@(en[ospx][0-9].*|wlan[0-9].*|eth[0-9].*)"
    target_label = "__keepme"
    replacement = "1"
  }
  rule {
    source_labels = ["__name__", "__keepme"]
    separator = "@"
    regex = "container_network_.*@"
    action = "drop"
  }
  // Remove unimportant labels
  rule {
    action = "labeldrop"
    regex = "boot_id|system_uuid"
  }
  forward_to = [
    prometheus.relabel.output.receiver,
  ]
}
